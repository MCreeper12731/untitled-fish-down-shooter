class Game:
    -game_instance_buffer
        *list vseh GameInstance v svetu
    -camera
        *reference do kamera GameInstance v svetu
    -player
        *ref do player GameInstance
    -world
        *ref do world GameInstance
    -physics_engine
        *reference to physics instance
    -game_loader
        *ref na GameLoader instance
    -State
        *enum game stanj - reset, idle, wave_incoming, fighting
    
    fun update(t, dt):
        *update instances in list
        *run next step of physics
        *check if state has changed, act accordingly
        *handle wave logic - spawning, starting, stopping etc

    fun spawn_enemy(EnemyType, Position):
        *wrapper za GameLoader funkcijo za spawnanje instancov, doda v instance list



class GameInstance:
    *effective wrapper za render Node da ni vse zakopan u properties
    -node
        *ref na dejanski NODE ki ga uporabla rendering pipeline
    -ID 
        *instance ID s katerim lahko selectamo / odstranimo iz instance list
    -world_position
        *position v 2D world coordinates, probably nekak normalized v tile dimensions (pos[1,1] je zgorn desn kot 1. tila spodi dol)
    -facing
        *2D normalized vector showing where the object is facing
    -elevation
        *since the world is in 2d coords we have to somehow reconstruct a 3d vector when rendering
    -type
        *val iz GameInstance_type enuma
    -properties
        *isDynamic          //can move
        *isRigid            //has collision detection
        *velocity_2d
        *max_speed
        *acceleration_2d
        *friction
    -bounding_box = [x_b, y_b, z_b, x_t, y_t, z_t] | None
        *collision bounding box
    -game
        *reference na Game instance, prolly useful in spaghetti code mania zadn tedn developmenta (every tedn)

    fun update(t, dt):
        *update node position based on world position

    fun destroy():
        *deletes itself out of game instance buffer

class WorldMap extends GameInstance:
    -bounding_box = world limits
    -facing = up_normal
    -tile_array
        *list of all tiles
    -tile_size
        *size 1 tile v normal coord sistemu

    def vec3_to_normpos():
        *returns a 2d vector of the normalized position relative to tiles
    
    def normpos_to_vec3():
        *returns a 3d vector from 2d normalized pos and elevation

class RigidBody extends GameInstance:
    *rigid static instanci kukr skale, skatle etc
    -isRigid = true
    -isDynamic = false

class DecorativeBody extends GameInstance:
    *dekorativni instanci kukr roze, grass ka nocemo da majo collisions
    -isRigid = false
    -isDynamic = true / false odvisn

class Enemy extends GameInstance:
    -isDynamic = true
    -isRigid = true
    -health, difficulty, cash drop
    -AI
        *ne vem se kako tocn bi to nrdil relatively modularno za razlicne enemyje
        *rabi nek finite state machine

    fun update(t, dt):
        super.update
        *update AI state

class Player extends GameInstance:
    -isDynamic = true
    -isRigid = true
    -health
    -primary_weapon
        *ref na node ka je gun
    -basic_melee
        *ref na node ka je basic melee
    -player_state
        *state iz player_controller
    -top_down_camera
        *camera controller

    fun ATTACK():
        *to se ne vem kako bomo tocn

    fun update(t, dt):
        *read action from camera controller
        *do action
        super.update




class GameLoader:
    -gltf_path
        *path do gltf file
    -instance_lookup_table
        *za instance type ma lookup table materialov, modelov
    -scene
        *gltf scene ka dobi iz gltf file

    fun generate_world_map():
        *calls MapCreator
        *adds world to scene
        return GameInstance of world map

    fun get_game_instance_list():
        *returns GameInstance list that contains references to the scene nodes

    fun create_node_instance(GameInstance, world_position):
        *createa instance, ga prestavi v pravilne koordinate
        *doda v scene node
        return GameInstance



class MapCreator:
    -map_tile_dimensions = [h, w]
    
    fun generate():
        *returns an WorldMap instance



class TopDownController:
    -player
        *ref to player instance
    -elevation
        *how high up the camera is
    -zoom
        *fov
    -keymap
        *maps a key press to a state
    -state
        *state to set the player when possible
    -move_dir_2d
        *direction of keypress move request
    -face_dir_2d
        *direction of mouse relative to player

    def init_listener():
        *setup for every listener

    def update(t, dt):
        *update camera position depending on player position
        *read action from keyboard and mouse and set player state and dir according to that



class PhysicsEngine:
    -game
        *ref to game instance
    
    def update(t, dt):
        *handle collisions
        *handle projectile collision markings - mark instances that got hit with a projectile
        *handle velocities and gravity, update instance positions



class Animator():  //sklepam da bomo animacije nrdil kr procedurally ker jst def ne znam nrdit da bi keyframe bral iz blender file
    -STATIC animation_map
        *maps the GameInstance_type to a list with values (vec3d.scale, vec3d.rotation, vec3d.translation, easing_function, time) on each value
        *first value is always (0, 0, 0, 0, 0), movements are relative

    -animate_instance
        *instance that will be animated
    -start = false
        *whether an animation is in progress, block new requests if it is
    -current_keyframe = 1
        *index of the current keyframe
    -current_frametime = 0
        *time spent excecuting current keyframe

    def update(t, dt):
        *add interpolated relative animation vectors to the desired animation instance
    
        

class UI_render():
    -game
        *ref to game
    
    def update(t, dt):
        *draw the appropriate UI

    def draw_ui(GameState):
        *draws ui based on the game state